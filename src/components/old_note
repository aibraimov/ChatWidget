import CopyToClipboard from 'react-copy-to-clipboard';
import React from 'react';
import Reflux from 'reflux';
import Router, { Link } from 'react-router';

import Actions from '../actions';
import ContentLink from './content_link';

module.exports = React.createClass({
  getInitialState() {
    return { editing: false, contentLinks:
      [
        {id: 1, test_value: "a", content_type: 0},
        {id: 2, test_value: "b", content_type: 1},
        {id: 3, test_value: "c", content_type: 2}
      ]
    };
  },
  componentWillMount() {
  },
  componentDidMount() {
    this.uniqueId = 4;
  },
  edit() {
      this.setState({editing: true});
  },
  save() {
      this.props.onChange(this.refs.newText.getDOMNode().value, this.props.index);
      this.setState({editing: false});
  },
  remove() {
      this.props.onRemove(this.props.index);
  },
  renderDisplay() {
      return (
        <div className="p-main">
          <span className="p-main-buttons">
              <button onClick={this.edit}
                      className="btn btn-primary glyphicon glyphicon-pencil" title="Изменить"/>
              <button onClick={this.remove}
                      className="btn btn-danger glyphicon glyphicon-trash" title="Удалить"/>
              <CopyToClipboard text={this.props.children}>
                <button className="btn" type="button" title="Копировать">
                    <img className="clippy" src="/images/clippy.svg" width="13" />
                </button>
              </CopyToClipboard>
          </span>
          <p className="p-main-question">
            {this.props.children}
          </p>
        </div>
          );
  },
  renderForm() {
      return (
        <div className="p-main">
          <span className="p-main-buttons">
            <button onClick={this.save} className="btn btn-success btn-sm glyphicon glyphicon-floppy-disk" />
          </span>
          <textarea ref="newText" defaultValue={this.props.children} className="form-control main-question"></textarea>
        </div>
      );
  },
  textForm() {
    if (this.state.editing) {
      return this.renderForm();
    }
    else {
      return this.renderDisplay();
    }
  },
  nextId() {
      this.uniqueId = this.uniqueId || 0;
      return this.uniqueId++;
  },
  addContentLink(text, type) {
    var arr = this.state.contentLinks;
    arr.push({
      id: this.nextId(),
      test_value: text,
      content_type: type
    });
    this.setState({contentLinks: arr});
  },
  removeContentLink(id) {
    var arr = this.state.contentLinks;
    var index = window.findWithAttr(arr, 'id', id);
    arr.splice(index, 1);
    this.setState({contentLinks: arr});
  },
  updateContentLink(newText, id) {
    var arr = this.state.contentLinks;
    var index = window.findWithAttr(arr, 'id', id);
    arr[index].test_value = newText;
    this.setState({contentLinks: arr});
  },
  eachContentLink(contentLink, i) {
    return (
      <ContentLink key={contentLink.id}
        index={contentLink.id}
        onChange={this.updateContentLink}
        onRemove={this.removeContentLink}
        testValue={contentLink.test_value}
        contentType={contentLink.content_type}
      />
    );
  },
  contentLinks(type) {
    return (
      <div>
      <ul className="content-links">
        {this.state.contentLinks.filter(function(x){return x.content_type === type;})
          .map(this.eachContentLink, this)
        }
      </ul>
      <button className="btn btn-sm btn-success glyphicon glyphicon-plus"
              onClick={this.addContentLink.bind(null, "New Content Link", type)}/>
      </div>
    );
  },
  render() {
    return (<div className="note" style={this.style}>
    {this.textForm()}

    <hr />
    <h4>Links</h4>
    {this.contentLinks(0)}

    <hr />
    <h4>Iputs</h4>
    {this.contentLinks(1)}

    <hr />
    <h4>Textareas</h4>
    {this.contentLinks(2)}
  </div>);
  }
});
